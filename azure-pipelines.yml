trigger:
  branches:
    include:
      - refs/heads/main
      - refs/heads/dev

pr:
  branches:
    include:
      - refs/heads/main

parameters:
  - name: azureServiceConnection
    type: string
    default: 'azure-mauwii'
  - name: subscriptionId
    type: string
    default: '58c48c56-8c1c-402a-a9d1-5efa2e34e124'
  - name: 'pythonVersion'
    type: string
    default: '3.10'
  - name: name
    type: string
    default: 'fastapi-opencensus'
  - name: dockerfile
    type: string
    default: 'docker/Dockerfile'
  - name: containerPort
    type: string
    default: '8080'
  - name: containerAppPath
    type: string
    default: '/home/app'
  - name: containerRegistryServiceConnection
    type: string
    default: 'docker-mauwii'
  - name: containerRegistryUrl
    type: string
    default: 'https://index.docker.io'
  - name: containerRegistryUsername
    type: string
    default: 'mauwii'
  # - name: containerTag
  #   type: string
  #   default: '$(Build.BuildId)'
  - name: resourceLocation
    type: string
    default: 'westeurope'

variables:
  - name: azureServiceConnection
    value: '${{ parameters.azureServiceConnection }}'
  - name: repository
    value: '${{ parameters.containerRegistryUsername }}/${{ parameters.name }}'
  - name: tag
    value: 'latest'
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/dev') }}:
      - name: devtag
        value: '-dev'

jobs:
  - job: bicep
    displayName: Bicep
    steps:
      - task: AzureCLI@2
        displayName: create Resourcegroup
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az group create \
              --subscription ${{ parameters.subscriptionId }} \
              --resource-group ${{ parameters.name }} \
              --location ${{ parameters.resourceLocation }}

      - task: AzureCLI@2
        displayName: preflight validation
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment group what-if \
              --resource-group ${{ parameters.name }} \
              --subscription ${{ parameters.subscriptionId }} \
              --template-file main.bicep \
              --name=$(Build.SourceBranchName) \
              --parameters \
                name=${{ parameters.name }} \
                containerRegistryUrl=${{ parameters.containerRegistryUrl }} \
                containerRegistryUsername=${{ parameters.containerRegistryUsername }} \
                containerPort=${{ parameters.containerPort }} \
                containerTag=$(tag)${{ variables.devtag }}

      - task: AzureCLI@2
        displayName: deplyo Resources
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment group create \
              --resource-group ${{ parameters.name }} \
              --subscription ${{ parameters.subscriptionId }} \
              --template-file main.bicep \
              --name=$(Build.SourceBranchName) \
              --parameters \
                name=${{ parameters.name }} \
                containerRegistryUrl=${{ parameters.containerRegistryUrl }} \
                containerRegistryUsername=${{ parameters.containerRegistryUsername }} \
                containerPort=${{ parameters.containerPort }} \
                containerTag=$(tag)${{ variables.devtag }}

  - job: testPythonApp
    displayName: test python
    dependsOn: bicep
    steps:
      - task: AzureCLI@2
        displayName: get InstrumentationKey
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            insightsId=$(az deployment group show \
              --resource-group ${{ parameters.name }} \
              --subscription ${{ parameters.subscriptionId }} \
              --name $(Build.SourceBranchName) \
              --query properties.outputs.insightsId.value \
              -o tsv)
            connectionString=$(az resource show \
              --subscription ${{ parameters.subscriptionId }} \
              --ids $insightsId \
              --query properties.ConnectionString \
              -o tsv)
            echo "##vso[task.setvariable variable=connectionString;]${connectionString}"

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '${{ parameters.pythonVersion }}'
          addToPath: true

      - script: |
          python -m pip install \
            --upgrade \
              pip \
              setuptools \
              wheel
        displayName: update dependencies

      - script: |
          python -m pip install \
            -r requirements.txt
        displayName: install requirements

      - script: |
          pytest tests/test.py \
            --doctest-modules \
            --junitxml=junit/test-results.xml
        displayName: run pytest
        env:
          APPLICATIONINSIGHTS_CONNECTION_STRING: $(connectionString)

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          testRunTitle: 'Publish test results'

  - job: container
    displayName: Container
    dependsOn: testPythonApp
    steps:
      - task: Docker@2
        inputs:
          containerRegistry: '${{ parameters.containerRegistryServiceConnection }}'
          command: 'login'

      - task: Cache@2
        displayName: Cache task
        inputs:
          key: 'buildx | docker | "$(Agent.OS)" | cache'
          path: $(Pipeline.Workspace)/docker/buildx
          cacheHitVar: CACHE_RESTORED

      - script: |
          docker load -i $(Pipeline.Workspace)/docker/buildx/cache.tar
        displayName: Docker restore
        condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

      - script: |
          docker run \
            --privileged \
            --rm \
            tonistiigi/binfmt \
            --install all
          docker buildx create \
            --name mybuilder \
            --driver docker-container \
            --bootstrap \
            --use
          docker buildx build \
            --platform="linux/amd64,linux/arm64" \
            --build-arg="PORT=${{ parameters.containerPort }}" \
            --build-arg="APP_PATH=${{ parameters.containerAppPath }}" \
            --tag="$(repository):$(Build.BuildId)" \
            --tag="$(repository):latest${{ variables.devtag }}" \
            --file="${{Â parameters.dockerfile }}" \
            --push \
            .
        displayName: build and push multiarch container

      - script: |
          mkdir -p $(Pipeline.Workspace)/docker/buildx
          docker save -o $(Pipeline.Workspace)/docker/buildx/cache.tar moby/buildkit:buildx-stable-1 tonistiigi/binfmt:latest
        displayName: Docker save
        condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))

  # - job: webAppContainer
  #   dependsOn: container
  #   displayName: update webApp Container
  #   steps:
  #     - task: AzureCLI@2
  #       displayName: get webApp Name
  #       inputs:
  #         azureSubscription: $(azureServiceConnection)
  #         scriptType: bash
  #         scriptLocation: inlineScript
  #         inlineScript: |
  #           webAppName=$(az deployment group show \
  #             --resource-group ${{ parameters.name }} \
  #             --name $(Build.SourceBranchName) \
  #             --query properties.outputs.webAppName.value \
  #             -o tsv)
  #           echo "##vso[task.setvariable variable=webAppName;]${webAppName}"

  #     - task: AzureWebAppContainer@1
  #       displayName: Deploy WebApp Container
  #       inputs:
  #         appName: '$(webAppName)'
  #         resourceGroupName: '${{ parameters.name }}'
  #         azureSubscription: '$(azureServiceConnection)'
  #         imageName: '$(repository):$(tag)'
